import {createToast} from "./create_toast.js";

// –û–±—â–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

class Request {

    static async get({url, body = null, headers = {}, showToast = true}) {
        return await Request.send({method: 'get', url: url, body: body, headers: headers, showToast: showToast})
    }

    static async post({url, body = null, headers = {}, showToast = true}) {
        return await Request.send({method: 'post', url: url, body: body, headers: headers, showToast: showToast})
    }

    static async delete({url, body = null, headers = {}, showToast = true}) {
        return await Request.send({method: 'delete', url: url, body: body, headers: headers, showToast: showToast})
    }

    static async put({url, body = null, headers = {}, showToast = true}) {
        return await Request.send({method: 'put', url: url, body: body, headers: headers, showToast: showToast})
    }

    static async patch({url, body = null, headers = {}, showToast = true}) {
        return await Request.send({method: 'patch', url: url, body: body, headers: headers, showToast: showToast})
    }

    static async send({method, url, body = null, headers = {}, showToast = true}) {

        const EMO = ['ÔÆ©Ÿ®ŸÄÔÆ©ÔÆ©Ÿ®ŸÄü´ÄÔÆ©Ÿ®ŸÄÔÆ©ÔÆ©Ÿ®ŸÄ', 'ü¶ãÍ¶ø', 'üçÜüçëüçÜüí¶ü•õCUM', 'ü•õìÇ∫', 'ùñìùñéùñåùñåùñÜ ‚ô±', 'ìÉµ', '‡≠ß‚ç§‚Éùüíê', 'ü¶ä', 'üê≤', '‡∂û'];
        const successEmo = 'üåü';
        const errorEmo = '‚ò†';

        method = method.toUpperCase()

        const requestOptions = {
            method: method,
            headers: {
                'Accept': 'application/json',
                ...headers
            },
            body: body,
            redirect: "follow"
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç
        if (body && ['POST', 'PUT', 'PATCH', 'DELETE'].includes(requestOptions.method)) {

            if (body instanceof FormData) {
                requestOptions.body = body;
            } else {
                requestOptions.body = JSON.stringify(body);
                requestOptions.headers['Content-Type'] = 'application/json';
            }

        }

        try {
            const response = await fetch(url, requestOptions);

            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –Ω–µ json - –∑–Ω–∞—á–∏—Ç –æ—à–∏–±–∫–∞ –Ω–µ –≤ –ª–æ–≥–∏–∫–µ —Ä–∞–±–æ—Ç—ã (—É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π url –∏ —Ç.–¥.)
            let responseData = {};
            let responseEmpty = true;
            try {
                responseData = await response.json();
                responseEmpty = false;
            } catch (e) {
                console.error('–ù–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è –æ—Ç–≤–µ—Ä—Ç: ', e);
            }


            // –û—à–∏–±–∫–∞ HTTP (4xx, 5xx)
            if (!response.ok) {
                const status = response.status;
                let errorText = '–±–µ–¥–∞!';
                let toastText = '';
                let logText = '';
                try {
                    errorText = await response.text();
                } catch (e) {
                    console.error('–ù–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –æ—à–∏–±–∫—É: ', e)
                }

                if (responseEmpty) {
                    toastText = `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${status} ${errorText}`;
                    logText = `server ${method} ${url} failed: ${status}\n${errorText}`;
                } else {
                    errorText = responseData.error ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';

                    toastText = `–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${errorText}`;
                    logText = `api ${method} ${url} failed: ${status}\n${errorText}`;
                }


                createToast(toastText, 'error');
                console.error(logText);
                return null;
            }

            // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if (showToast) {
                createToast(`–£—Å–ø–µ—à–Ω–æ!`, 'success');
            }

            return responseData?.data ?? responseData;

        } catch (e) {
            // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ –¥—Ä—É–≥–∞—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            createToast('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å', 'error');
            console.error(`Request failed`);
            console.error(e);
            return null;
        }

    }
}

export {Request}